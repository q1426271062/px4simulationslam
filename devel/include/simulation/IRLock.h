// Generated by gencpp from file simulation/IRLock.msg
// DO NOT EDIT!


#ifndef SIMULATION_MESSAGE_IRLOCK_H
#define SIMULATION_MESSAGE_IRLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulation
{
template <class ContainerAllocator>
struct IRLock_
{
  typedef IRLock_<ContainerAllocator> Type;

  IRLock_()
    : seq(0)
    , stamp()
    , frame_id()
    , pos_x(0.0)
    , pos_y(0.0)
    , size_x(0.0)
    , size_y(0.0)  {
    }
  IRLock_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp()
    , frame_id(_alloc)
    , pos_x(0.0)
    , pos_y(0.0)
    , size_x(0.0)
    , size_y(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;





  typedef boost::shared_ptr< ::simulation::IRLock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulation::IRLock_<ContainerAllocator> const> ConstPtr;

}; // struct IRLock_

typedef ::simulation::IRLock_<std::allocator<void> > IRLock;

typedef boost::shared_ptr< ::simulation::IRLock > IRLockPtr;
typedef boost::shared_ptr< ::simulation::IRLock const> IRLockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulation::IRLock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulation::IRLock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulation::IRLock_<ContainerAllocator1> & lhs, const ::simulation::IRLock_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulation::IRLock_<ContainerAllocator1> & lhs, const ::simulation::IRLock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simulation::IRLock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulation::IRLock_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::IRLock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::IRLock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::IRLock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::IRLock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulation::IRLock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fcca3ed526ec96516d6caa794588551";
  }

  static const char* value(const ::simulation::IRLock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fcca3ed526ec965ULL;
  static const uint64_t static_value2 = 0x16d6caa794588551ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulation::IRLock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulation/IRLock";
  }

  static const char* value(const ::simulation::IRLock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulation::IRLock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seq	\n"
"time stamp\n"
"string frame_id\n"
"float64 pos_x		\n"
"float64 pos_y		\n"
"float64 size_x		\n"
"float64 size_y		\n"
;
  }

  static const char* value(const ::simulation::IRLock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulation::IRLock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.size_x);
      stream.next(m.size_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IRLock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulation::IRLock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulation::IRLock_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATION_MESSAGE_IRLOCK_H
